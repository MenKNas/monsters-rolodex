{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","monster","id","src","name","website","address","city","CardList","props1","console","log","monsters","map","key","CardList2","props2","children","child","SearchBox","placeholder","handleChange","justConsole","type","onChange","onClick","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","email","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iUAGaA,G,YAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,eACX,yBAAKC,IAAG,kBAAaF,EAAMG,QAAQC,IAAMC,IAAG,+BAA0BL,EAAMG,QAAQC,GAAxC,gBAC5C,gCAAMJ,EAAMG,QAAQG,KAApB,KACA,+BAAKN,EAAMG,QAAQI,QAAnB,KACA,+BAAKP,EAAMG,QAAQK,QAAQC,KAA3B,QCLCC,EAAW,SAACC,GAErB,OADAC,QAAQC,IAAIF,GAER,yBAAKV,UAAU,aACVU,EAAOG,SAASC,KAAI,SAAAZ,GACjB,OACI,kBAAC,EAAD,CAAMa,IAAKb,EAAQC,GAAID,QAASA,SAOvCc,EAAY,SAACC,GAEtB,OADAN,QAAQC,IAAIK,GAER,yBAAKjB,UAAU,aAEPiB,EAAOC,SAASJ,KAAM,SAAAK,GAClB,OAAQA,OCpBfC,G,MAAY,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,YAClD,OACI,2BACIvB,UAAU,aACVwB,KAAK,SAASH,YAAaA,EAC3BI,SAAUH,EACVI,QAASH,MC0ENI,G,wDAzDb,aAAe,IAAD,8BACZ,gBA0BFL,aAAe,SAACM,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAzBpC,EAAKC,MAAQ,CACXpB,SAAU,GACViB,YAAa,IALH,E,gEAWQ,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAChB,SAASyB,S,oCASvC3B,QAAQC,IAAI,iC,+BAQJ,IAAD,EAC6B2B,KAAKN,MAA/BpB,EADH,EACGA,SAAUiB,EADb,EACaA,YACZU,EAAmB3B,EAAS4B,QAAQ,SAAAvC,GAAO,OAAIA,EAAQG,KAAKqC,cAAcC,SAASb,EAAYY,kBACrG,OACE,yBAAK1C,UAAU,OACb,6BACE,+CACA,kBAAC,EAAD,CAAWqB,YAAY,kBAAkBC,aAAciB,KAAKjB,aAAcC,YAAagB,KAAKhB,cAC5F,kBAAC,EAAD,CAAUV,SAAU2B,IACpB,6BACA,kBAAC,EAAD,KACGD,KAAKN,MAAMpB,SAASC,KAAI,SAAAK,GACvB,OACE,yBAAKJ,IAAKI,EAAMhB,GAAIH,UAAU,eAC5B,+BAAKmB,EAAMyB,OACX,+BAAKzB,EAAMb,oB,GAhDbuC,cCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.8151615d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"single-card\">\r\n            <img alt={`monster-${props.monster.id}`} src={`https://robohash.org/${props.monster.id}?set=set4 `}/>\r\n            <h3> {props.monster.name} </h3>\r\n            <p> {props.monster.website} </p>\r\n            <p> {props.monster.address.city} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props1) => {\r\n    console.log(props1)\r\n    return (\r\n        <div className=\"card-grid\">\r\n            {props1.monsters.map(monster => {\r\n                return (\r\n                    <Card key={monster.id} monster={monster}/>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const CardList2 = (props2) => {\r\n    console.log(props2)\r\n    return (\r\n        <div className=\"card-grid\">\r\n            {\r\n                props2.children.map ( child => {\r\n                    return (child)\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange, justConsole}) => {\r\n    return (\r\n        <input \r\n            className=\"search-box\"\r\n            type=\"search\" placeholder={placeholder} \r\n            onChange={handleChange} \r\n            onClick={justConsole}\r\n        />\r\n    )\r\n}","import React, {Component} from 'react';\nimport { CardList, CardList2 } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//        <h1> Welcome bitch ! </h1>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount () {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  // displayName() {\n  //   setState({name:'Menios'})\n  // }\n\n  //pass this example method as a prop to child component\n  justConsole(){\n    console.log('yeah ok right thats great !')\n  }\n\n  //lexical scoping with arrow functions so we have the this to refer to the Component\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value})\n  }\n\n  render() {\n      const { monsters, searchField } = this.state;\n      const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n      return (\n        <div className=\"App\">\n          <div>\n            <h2> OUR FIRST APP </h2>\n            <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange} justConsole={this.justConsole}/>\n            <CardList monsters={filteredMonsters} /> \n            <hr></hr>\n            <CardList2> \n              {this.state.monsters.map(child => {\n                return(\n                  <div key={child.id} className=\"single-card\">\n                    <p> {child.email}</p>\n                    <p> {child.website }</p>\n                  </div>\n                )\n              })}\n            </CardList2>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}